from abc import ABC, abstractmethod

class ContaBancaria(ABC):
    def __init__(self, conta, titular, saldo=0):
        self.conta = conta
        self.titular = titular
        self.saldo = saldo

    @abstractmethod
    def sacar(self, valor):
        pass

    @abstractmethod
    def depositar(self, valor):
        pass

    @abstractmethod
    def consultar_saldo(self):
        pass

    @abstractmethod
    def infoDaConta(self):
        pass


class ContaCorrente(ContaBancaria):
    def __init__(self, conta, titular, saldo=0, chequeEspecial=0):
        super().__init__(conta, titular, saldo)
        self.chequeEspecial = chequeEspecial

    def infoDaConta(self):
        print('Número da conta:', self.conta)
        print('Nome do titular:', self.titular)
        print('Saldo da conta:', self.saldo)

    def depositar(self, valor):
        self.saldo += valor

    def sacar(self, valor):
        if self.saldo - valor >= -self.chequeEspecial:
            self.saldo -= valor
            return True
        else:
            print("Saldo insuficiente.")
            return False

    def consultar_saldo(self):
        return self.saldo


class ContaPoupanca(ContaBancaria):
    juros = 0.01

    def __init__(self, conta, titular, saldo=0):
        super().__init__(conta, titular, saldo)

    def infoDaConta(self):
        print('Número da conta:', self.conta)
        print('Nome do titular:', self.titular)
        print('Saldo da conta:', self.saldo)

    def depositar(self, valor):
        self.saldo += valor

    def sacar(self, valor):
        if self.saldo - valor < 0:
            print("Saldo insuficiente.")
            return False
        else:
            self.saldo -= valor
            return True

    def consultar_saldo(self):
        return self.saldo + (self.saldo * self.juros)
